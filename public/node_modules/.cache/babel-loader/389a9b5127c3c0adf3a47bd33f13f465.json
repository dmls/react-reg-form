{"ast":null,"code":"/*\r\n *  jQuery Date Dropdowns - v1.0.0\r\n *  A simple, customisable date select plugin\r\n *\r\n *  Made by Chris Brown\r\n *  Under MIT License\r\n */\n;\n\n(function ($, window, document, undefined) {\n  'use strict'; // Create the defaults once\n\n  var pluginName = 'dateDropdowns',\n      pluginDefaults = {\n    defaultDate: null,\n    defaultDateFormat: 'yyyy-mm-dd',\n    displayFormat: 'dmy',\n    submitFormat: 'yyyy-mm-dd',\n    minAge: 0,\n    maxAge: 120,\n    minYear: null,\n    maxYear: null,\n    submitFieldName: 'date',\n    wrapperClass: 'date-dropdowns',\n    dropdownClass: null,\n    daySuffixes: true,\n    monthSuffixes: true,\n    monthFormat: 'long',\n    required: false,\n    dayLabel: 'Day',\n    monthLabel: 'Month',\n    yearLabel: 'Year',\n    monthLongValues: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    monthShortValues: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    initialDayMonthYearValues: ['Day', 'Month', 'Year'],\n    daySuffixValues: ['st', 'nd', 'rd', 'th']\n  }; // The actual plugin constructor\n\n  function Plugin(element, options) {\n    this.element = element; // Element handle\n\n    this.$element = $(element); // jQuery element handle\n\n    this.config = $.extend({}, pluginDefaults, options); // Plugin options\n\n    this.internals = {\n      // Internal variables\n      objectRefs: {}\n    };\n    this.init();\n    return this;\n  } // Avoid Plugin.prototype conflicts\n\n\n  $.extend(Plugin.prototype, {\n    /**\n     * Initialise the plugin\n     */\n    init: function init() {\n      this.checkForDuplicateElement();\n      this.setInternalVariables();\n      this.setupMarkup();\n      this.buildDropdowns();\n      this.attachDropdowns();\n      this.bindChangeEvent();\n\n      if (this.config.defaultDate) {\n        this.populateDefaultDate();\n      }\n    },\n\n    /**\n     * Check whether an element exists with the same name attribute. If so, throw an error\n     */\n    checkForDuplicateElement: function checkForDuplicateElement() {\n      if ($('input[name=\"' + this.config.submitFieldName + '\"]').length) {\n        $.error('Duplicate element found');\n        return false;\n      }\n\n      return true;\n    },\n\n    /**\n     * Set the plugin's internal variables\n     */\n    setInternalVariables: function setInternalVariables() {\n      var date = new Date();\n      this.internals.currentDay = date.getDate();\n      this.internals.currentMonth = date.getMonth() + 1;\n      this.internals.currentYear = date.getFullYear();\n    },\n\n    /**\n     * Set the container which will hold the date dropdowns.\n     *\n     * - If the element on which the plugin was called is an input of type text or hidden, set it to\n     *   be hidden and wrap it in a div. This outer div will become the container.\n     * - If the element was an HTML element (e.g. <div/>), create a hidden text field within it, and use\n     *   the div as the container.\n     */\n    setupMarkup: function setupMarkup() {\n      var wrapper, hiddenField;\n\n      if (this.element.tagName.toLowerCase() === 'input') {\n        if (!this.config.defaultDate) {\n          this.config.defaultDate = this.element.value;\n        } // Configure the input element and wrap\n\n\n        hiddenField = this.$element.attr('type', 'hidden').wrap('<div class=\"' + this.config.wrapperClass + '\"></div>');\n        var customFieldNameProvided = this.config.submitFieldName !== pluginDefaults.submitFieldName,\n            fieldHasName = this.element.hasAttribute('name'); // Set the name attribute of the submit input\n\n        if (!fieldHasName && !customFieldNameProvided) {\n          this.$element.attr('name', pluginDefaults.submitFieldName);\n        } else if (customFieldNameProvided) {\n          this.$element.attr('name', this.config.submitFieldName);\n        }\n\n        wrapper = this.$element.parent();\n      } else {\n        // Build a hidden input and set this.$element as the wrapper\n        hiddenField = $('<input/>', {\n          type: 'hidden',\n          name: this.config.submitFieldName\n        });\n        this.$element.append(hiddenField).addClass(this.config.wrapperClass);\n        wrapper = this.$element;\n      } // Store a reference to the wrapper and hidden field elements for later use\n\n\n      this.internals.objectRefs.pluginWrapper = wrapper;\n      this.internals.objectRefs.hiddenField = hiddenField;\n      return true;\n    },\n\n    /**\n     * Generate the Day, Month and Year dropdowns\n     */\n    buildDropdowns: function buildDropdowns() {\n      var $dayDropdown, $monthDropdown, $yearDropdown;\n      Plugin.message = {\n        day: this.config.initialDayMonthYearValues[0],\n        month: this.config.initialDayMonthYearValues[1],\n        year: this.config.initialDayMonthYearValues[2]\n      }; // Build the day dropdown element\n\n      $dayDropdown = this.buildDayDropdown();\n      this.internals.objectRefs.dayDropdown = $dayDropdown;\n      $monthDropdown = this.buildMonthDropdown();\n      this.internals.objectRefs.monthDropdown = $monthDropdown;\n      $yearDropdown = this.buildYearDropdown();\n      this.internals.objectRefs.yearDropdown = $yearDropdown;\n      return true;\n    },\n\n    /**\n     * Attach the generated dropdowns to the container\n     */\n    attachDropdowns: function attachDropdowns() {\n      var $element = this.internals.objectRefs.pluginWrapper,\n          $daySelect = this.internals.objectRefs.dayDropdown,\n          $monthSelect = this.internals.objectRefs.monthDropdown,\n          $yearSelect = this.internals.objectRefs.yearDropdown;\n\n      switch (this.config.displayFormat) {\n        case 'mdy':\n          $element.append($monthSelect, $daySelect, $yearSelect);\n          break;\n\n        case 'ymd':\n          $element.append($yearSelect, $monthSelect, $daySelect);\n          break;\n\n        case 'dmy':\n        default:\n          $element.append($daySelect, $monthSelect, $yearSelect);\n          break;\n      }\n\n      return true;\n    },\n\n    /**\n     * Bind the change event to the generated dropdowns\n     */\n    bindChangeEvent: function bindChangeEvent() {\n      var $daySelect = this.internals.objectRefs.dayDropdown,\n          $monthSelect = this.internals.objectRefs.monthDropdown,\n          $yearSelect = this.internals.objectRefs.yearDropdown,\n          pluginHandle = this,\n          objectRefs = this.internals.objectRefs;\n      objectRefs.pluginWrapper.on('change', 'select', function () {\n        var day = $daySelect.val(),\n            month = $monthSelect.val(),\n            year = $yearSelect.val(),\n            invalidDate,\n            newDate; // Find out whether the change has made the date invalid (e.g. 31st Feb)\n\n        invalidDate = pluginHandle.checkDate(day, month, year); // If invalid - add an error class to the day dropdown and return\n\n        if (invalidDate) {\n          objectRefs.dayDropdown.addClass('invalid');\n          objectRefs.hiddenField.change();\n          return false;\n        }\n\n        if ('00' !== objectRefs.dayDropdown.val()) {\n          objectRefs.dayDropdown.removeClass('invalid');\n        } // Empty the hidden field after each change\n\n\n        objectRefs.hiddenField.val(''); // Only format the submit date if a full date has been selected\n\n        if (!invalidDate && day * month * year !== 0) {\n          newDate = pluginHandle.formatSubmitDate(day, month, year);\n          objectRefs.hiddenField.val(newDate);\n        }\n\n        objectRefs.hiddenField.change();\n      });\n    },\n\n    /**\n     * Take a provided default date and populate both the hidden field and the\n     * dropdown elements with the relevant formatted values\n     *\n     * @returns {boolean}\n     */\n    populateDefaultDate: function populateDefaultDate() {\n      var date = this.config.defaultDate,\n          parts = [],\n          day = '',\n          month = '',\n          year = '';\n\n      switch (this.config.defaultDateFormat) {\n        case 'yyyy-mm-dd':\n        default:\n          parts = date.split('-');\n          day = parts[2];\n          month = parts[1];\n          year = parts[0];\n          break;\n\n        case 'dd/mm/yyyy':\n          parts = date.split('/');\n          day = parts[0];\n          month = parts[1];\n          year = parts[2];\n          break;\n\n        case 'mm/dd/yyyy':\n          parts = date.split('/');\n          day = parts[1];\n          month = parts[0];\n          year = parts[2];\n          break;\n\n        case 'unix':\n          parts = new Date();\n          parts.setTime(date * 1000);\n          day = parts.getDate() + '';\n          month = parts.getMonth() + 1 + '';\n          year = parts.getFullYear();\n\n          if (day.length < 2) {\n            day = '0' + day;\n          }\n\n          if (month.length < 2) {\n            month = '0' + month;\n          }\n\n          break;\n      } // Set the values on the dropdowns\n\n\n      this.internals.objectRefs.dayDropdown.val(day);\n      this.internals.objectRefs.monthDropdown.val(month);\n      this.internals.objectRefs.yearDropdown.val(year);\n      this.internals.objectRefs.hiddenField.val(date);\n\n      if (true === this.checkDate(day, month, year)) {\n        this.internals.objectRefs.dayDropdown.addClass('invalid');\n      }\n\n      return true;\n    },\n\n    /**\n     * Build a generic dropdown element\n     *\n     * @param type\n     * @returns {*|HTMLElement}\n     */\n    buildBaseDropdown: function buildBaseDropdown(type) {\n      var classString = type;\n\n      if (this.config.dropdownClass) {\n        classString += ' ' + this.config.dropdownClass;\n      }\n\n      return $('<select></select>', {\n        class: classString,\n        name: this.config.submitFieldName + '_[' + type + ']',\n        required: this.config.required\n      });\n    },\n\n    /**\n     * Build the day dropdown element\n     *\n     * @returns {*|HTMLElement}\n     */\n    buildDayDropdown: function buildDayDropdown() {\n      var day,\n          dropdown = this.buildBaseDropdown('day'),\n          option = document.createElement('option');\n      option.setAttribute('value', '');\n      option.appendChild(document.createTextNode(this.config.dayLabel));\n      dropdown.append(option); // Days 1-9\n\n      for (var i = 1; i < 10; i++) {\n        if (this.config.daySuffixes) {\n          day = i + this.getSuffix(i);\n        } else {\n          day = '0' + i;\n        }\n\n        option = document.createElement('option');\n        option.setAttribute('value', '0' + i);\n        option.appendChild(document.createTextNode(day));\n        dropdown.append(option);\n      } // Days 10-31\n\n\n      for (var j = 10; j <= 31; j++) {\n        day = j;\n\n        if (this.config.daySuffixes) {\n          day = j + this.getSuffix(j);\n        }\n\n        option = document.createElement('option');\n        option.setAttribute('value', j);\n        option.appendChild(document.createTextNode(day));\n        dropdown.append(option);\n      }\n\n      return dropdown;\n    },\n\n    /**\n     * Build the month dropdown element\n     *\n     * @returns {*|HTMLElement}\n     */\n    buildMonthDropdown: function buildMonthDropdown() {\n      var dropdown = this.buildBaseDropdown('month'),\n          option = document.createElement('option');\n      option.setAttribute('value', '');\n      option.appendChild(document.createTextNode(this.config.monthLabel));\n      dropdown.append(option); // Populate the month values\n\n      for (var monthNo = 1; monthNo <= 12; monthNo++) {\n        var month;\n\n        switch (this.config.monthFormat) {\n          case 'short':\n            month = this.config.monthShortValues[monthNo - 1];\n            break;\n\n          case 'long':\n            month = this.config.monthLongValues[monthNo - 1];\n            break;\n\n          case 'numeric':\n            month = monthNo;\n\n            if (this.config.monthSuffixes) {\n              month += this.getSuffix(monthNo);\n            }\n\n            break;\n        }\n\n        if (monthNo < 10) {\n          monthNo = '0' + monthNo;\n        }\n\n        option = document.createElement('option');\n        option.setAttribute('value', monthNo);\n        option.appendChild(document.createTextNode(month));\n        dropdown.append(option);\n      }\n\n      return dropdown;\n    },\n\n    /**\n     * Build the year dropdown element.\n     *\n     * By default minYear and maxYear are null, however if provided they take precedence over\n     * the minAge and maxAge values.\n     *\n     * @returns {*|HTMLElement}\n     */\n    buildYearDropdown: function buildYearDropdown() {\n      var minYear = this.config.minYear,\n          maxYear = this.config.maxYear,\n          dropdown = this.buildBaseDropdown('year'),\n          option = document.createElement('option');\n      option.setAttribute('value', '');\n      option.appendChild(document.createTextNode(this.config.yearLabel));\n      dropdown.append(option);\n\n      if (!minYear) {\n        minYear = this.internals.currentYear - (this.config.maxAge + 1);\n      }\n\n      if (!maxYear) {\n        maxYear = this.internals.currentYear - this.config.minAge;\n      }\n\n      for (var i = maxYear; i >= minYear; i--) {\n        option = document.createElement('option');\n        option.setAttribute('value', i);\n        option.appendChild(document.createTextNode(i));\n        dropdown.append(option);\n      }\n\n      return dropdown;\n    },\n\n    /**\n     * Get the relevant suffix for a day/month number\n     *\n     * @param number\n     * @returns {string}\n     */\n    getSuffix: function getSuffix(number) {\n      var suffix = '';\n      var st = this.config.daySuffixValues[0];\n      var nd = this.config.daySuffixValues[1];\n      var rd = this.config.daySuffixValues[2];\n      var th = this.config.daySuffixValues[3];\n\n      switch (number % 10) {\n        case 1:\n          suffix = number % 100 === 11 ? th : st;\n          break;\n\n        case 2:\n          suffix = number % 100 === 12 ? th : nd;\n          break;\n\n        case 3:\n          suffix = number % 100 === 13 ? th : rd;\n          break;\n\n        default:\n          suffix = 'th';\n          break;\n      }\n\n      return suffix;\n    },\n\n    /**\n     * Check whether the date entered is invalid, e.g. 31st Feb\n     *\n     * @param day\n     * @param month\n     * @param year\n     * @returns {boolean}\n     */\n    checkDate: function checkDate(day, month, year) {\n      var invalidDate;\n\n      if (month !== '00') {\n        var numDaysInMonth = new Date(year, month, 0).getDate(),\n            selectedDayInt = parseInt(day, 10);\n        invalidDate = this.updateDayOptions(numDaysInMonth, selectedDayInt); // If the date is invalid, empty the hidden field to prevent invalid submissions\n\n        if (invalidDate) {\n          this.internals.objectRefs.hiddenField.val('');\n        }\n      }\n\n      return invalidDate;\n    },\n\n    /**\n     * Update the day options available based on the month now selected\n     *\n     * @param numDaysInMonth\n     * @param selectedDayInt\n     * @returns {boolean}\n     */\n    updateDayOptions: function updateDayOptions(numDaysInMonth, selectedDayInt) {\n      var lastDayOption = parseInt(this.internals.objectRefs.dayDropdown.children(':last').val(), 10),\n          newDayOption = '',\n          newDayText = '',\n          invalidDay = false; // If the selected month has less days than the Day dropdown currently contains - remove the extra days\n\n      if (lastDayOption > numDaysInMonth) {\n        while (lastDayOption > numDaysInMonth) {\n          this.internals.objectRefs.dayDropdown.children(':last').remove();\n          lastDayOption--;\n        } // If the user-selected day is removed, indicate this so a message can be shown to the user\n\n\n        if (selectedDayInt > numDaysInMonth) {\n          invalidDay = true;\n        } // If the month contains more days than the Day dropdown contains - add the missing options\n\n      } else if (lastDayOption < numDaysInMonth) {\n        while (lastDayOption < numDaysInMonth) {\n          newDayOption = ++lastDayOption;\n          newDayText = newDayOption; // Add the suffix if required\n\n          if (this.config.daySuffixes) {\n            newDayText += this.getSuffix(lastDayOption);\n          } // Build the option and append to the dropdown\n\n\n          var option = document.createElement('option');\n          option.setAttribute('value', newDayOption);\n          option.appendChild(document.createTextNode(newDayText));\n          this.internals.objectRefs.dayDropdown.append(option);\n        }\n      }\n\n      return invalidDay;\n    },\n\n    /**\n     * Format the selected date based on the submitFormat config value provided\n     *\n     * @param day\n     * @param month\n     * @param year\n     * @returns {*}\n     */\n    formatSubmitDate: function formatSubmitDate(day, month, year) {\n      var formattedDate, _date;\n\n      switch (this.config.submitFormat) {\n        case 'unix':\n          _date = new Date();\n\n          _date.setDate(day);\n\n          _date.setMonth(month - 1);\n\n          _date.setYear(year);\n\n          formattedDate = Math.round(_date.getTime() / 1000);\n          break;\n\n        default:\n          formattedDate = this.config.submitFormat.replace('dd', day).replace('mm', month).replace('yyyy', year);\n          break;\n      }\n\n      return formattedDate;\n    },\n\n    /**\n     * Revert the changes applied by the plugin on the specified element\n     */\n    destroy: function destroy() {\n      var wrapperClass = this.config.wrapperClass;\n\n      if (this.$element.hasClass(wrapperClass)) {\n        this.$element.empty();\n      } else {\n        var $parent = this.$element.parent(),\n            $select = $parent.find('select');\n        this.$element.unwrap();\n        $select.remove();\n      }\n    }\n  }); // A really lightweight plugin wrapper around the constructor,\n  // preventing against multiple instantiations\n\n  $.fn[pluginName] = function (options) {\n    this.each(function () {\n      if (typeof options === 'string') {\n        var args = Array.prototype.slice.call(arguments, 1);\n        var plugin = $.data(this, 'plugin_' + pluginName);\n\n        if (typeof plugin === 'undefined') {\n          $.error('Please initialize the plugin before calling this method.');\n          return false;\n        }\n\n        plugin[options].apply(plugin, args);\n      } else {\n        if (!$.data(this, 'plugin_' + pluginName)) {\n          $.data(this, 'plugin_' + pluginName, new Plugin(this, options));\n        }\n      }\n    }); // chain jQuery functions\n\n    return this;\n  };\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"script"}